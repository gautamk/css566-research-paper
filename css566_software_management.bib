
@inproceedings{lin_why_2016,
	address = {New York, NY, USA},
	series = {{CSCW} '16 {Companion}},
	title = {Why {Developers} {Are} {Slacking} {Off}: {Understanding} {How} {Software} {Teams} {Use} {Slack}},
	isbn = {978-1-4503-3950-6},
	shorttitle = {Why {Developers} {Are} {Slacking} {Off}},
	url = {http://doi.acm.org/10.1145/2818052.2869117},
	doi = {10.1145/2818052.2869117},
	abstract = {Slack is a modern communication platform for teams that is seeing wide and rapid adoption by software develop-ment teams. Slack not only facilitates team messaging and archiving, but it also supports a wide plethora of inte-grations to external services and bots. We have found that Slack and its integrations (i.e., bots) are playing an increas-ingly signi{\"i}{\textlnot}?cant role in software development, replacing email in some cases and disrupting software development processes. To understand how Slack impacts development team dynamics, we designed an exploratory study to inves-tigate how developers use Slack and how they bene{\"i}{\textlnot}?t from it. We {\"i}{\textlnot}?nd that developers use Slack for personal, team-wide and community-wide purposes. Our research also reveals that developers use and create diverse integrations (called bots) to support their work. This study serves as the {\"i}{\textlnot}?rst step towards understanding the role of Slack in sup-porting software engineering.},
	urldate = {2016-04-25},
	booktitle = {Proceedings of the 19th {ACM} {Conference} on {Computer} {Supported} {Cooperative} {Work} and {Social} {Computing} {Companion}},
	publisher = {ACM},
	author = {Lin, Bin and Zagalsky, Alexey and Storey, Margaret-Anne and Serebrenik, Alexander},
	year = {2016},
	keywords = {Bots, Collaboration, Slack, Social Media, Software Development},
	pages = {333--336},
	file = {ACM Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/24TJS5NV/Lin et al. - 2016 - Why Developers Are Slacking Off Understanding How.pdf:application/pdf}
}

@inproceedings{stolberg_enabling_2009,
	title = {Enabling {Agile} {Testing} through {Continuous} {Integration}},
	doi = {10.1109/AGILE.2009.16},
	abstract = {A continuous integration system is often considered one of the key elements involved in supporting an agile software development and testing environment. As a traditional software tester transitioning to an agile development environment it became clear to me that I would need to put this essential infrastructure in place and promote improved development practices in order to make the transition to agile testing possible. This experience report discusses a continuous integration implementation I led last year. The initial motivations for implementing continuous integration are discussed and a pre and post-assessment using Martin Fowler's" practices of continuous integration" is provided along with the technical specifics of the implementation. The report concludes with a retrospective of my experiences implementing and promoting continuous integration within the context of agile testing.},
	booktitle = {Agile {Conference}, 2009. {AGILE} '09.},
	author = {Stolberg, S.},
	month = aug,
	year = {2009},
	keywords = {Agile, agile development environment, agile software development, agile testing, Application software, Automated Acceptance Tests, Automated Unit Tests, Automatic testing, Automation, Computer bugs, Continuous Integration, continuous integration system, Feedback, Graphical user interfaces, integrated software, Manuals, Programming profession, program testing, Software engineering, Software testing, System testing},
	pages = {369--374},
	file = {IEEE Xplore Abstract Record:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/EW7JVTGX/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/937XEN6T/Stolberg - 2009 - Enabling Agile Testing through Continuous Integrat.pdf:application/pdf}
}

@article{vasilescu_continuous_2014,
	title = {Continuous integration in a social-coding world: {Empirical} evidence from {GitHub}. **{Updated} version with corrections**},
	shorttitle = {Continuous integration in a social-coding world},
	url = {http://arxiv.org/abs/1512.01862},
	doi = {10.1109/ICSME.2014.62},
	abstract = {Continuous integration is a software engineering practice of frequently merging all developer working copies with a shared main branch, e.g., several times a day. With the advent of GitHub, a platform well known for its "social coding" features that aid collaboration and sharing, and currently the largest code host in the open source world, collaborative software development has never been more prominent. In GitHub development one can distinguish between two types of developer contributions to a project: direct ones, coming from a typically small group of developers with write access to the main project repository, and indirect ones, coming from developers who fork the main repository, update their copies locally, and submit pull requests for review and merger. In this paper we explore how GitHub developers use continuous integration as well as whether the contribution type (direct versus indirect) and different project characteristics (e.g., main programming language, or project age) are associated with the success of the automatic builds.},
	urldate = {2016-04-25},
	journal = {arXiv:1512.01862 [cs]},
	author = {Vasilescu, Bogdan and van Schuylenburg, Stef and Wulms, Jules and Serebrenik, Alexander and Brand, Mark G. J. van den},
	month = sep,
	year = {2014},
	note = {arXiv: 1512.01862},
	keywords = {Computer Science - Software Engineering},
	pages = {401--405},
	annote = {Comment: This is an updated and corrected version of our ICSME 2014 paper: http://dx.doi.org/10.1109/ICSME.2014.62},
	file = {arXiv\:1512.01862 PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/UPU7V2ZF/Vasilescu et al. - 2014 - Continuous integration in a social-coding world E.pdf:application/pdf;arXiv.org Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/6P7EKPP7/1512.html:text/html}
}

@article{stahl_modeling_2014,
	title = {Modeling continuous integration practice differences in industry software development},
	volume = {87},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121213002276},
	doi = {10.1016/j.jss.2013.08.032},
	abstract = {Continuous integration is a software practice where developers integrate frequently, at least daily. While this is an ostensibly simple concept, it does leave ample room for interpretation: what is it the developers integrate with, what happens when they do, and what happens before they do? These are all open questions with regards to the details of how one implements the practice of continuous integration, and it is conceivable that not all such implementations in the industry are alike. In this paper we show through a literature review that there are differences in how the practice of continuous integration is interpreted and implemented from case to case. Based on these findings we propose a descriptive model for documenting and thereby better understanding implementations of the continuous integration practice and their differences. The application of the model to an industry software development project is then described in an illustrative case study.},
	urldate = {2016-05-08},
	journal = {Journal of Systems and Software},
	author = {St{\r a}hl, Daniel and Bosch, Jan},
	month = jan,
	year = {2014},
	keywords = {agile software development, Continuous Integration},
	pages = {48--59},
	file = {ScienceDirect Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/NFTVBEW4/St{\r a}hl and Bosch - 2014 - Modeling continuous integration practice differenc.pdf:application/pdf;ScienceDirect Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/CE4HP9KK/S0164121213002276.html:text/html}
}

@book{stellman_applied_2005,
	title = {Applied software project management},
	url = {https://books.google.com/books?hl=en&lr=&id=IYdJocLVa8wC&oi=fnd&pg=PR1&dq=Stellman,+Andrew%3B+Greene,+Jennifer+(2005).+Applied+Software+Project+Management&ots=zYa3fj3r4l&sig=bqQPtg2d1Gt17WNkARS3WQnQ5oQ},
	urldate = {2016-05-08},
	publisher = {" O'Reilly Media, Inc."},
	author = {Stellman, Andrew and Greene, Jennifer},
	year = {2005},
	file = {Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/27JZJ3AC/books.html:text/html}
}

@article{fowler_continuous_2006,
	title = {Continuous integration},
	url = {http://www.dccia.ua.es/dccia/inf/asignaturas/MADS/2013-14/lecturas/10_Fowler_Continuous_Integration.pdf},
	urldate = {2016-05-08},
	journal = {Thought-Works) http://www. thoughtworks. com/Continuous Integration. pdf},
	author = {Fowler, Martin and Foemmel, Matthew},
	year = {2006},
	pages = {122},
	file = {[PDF] from ua.es:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/X9JA3TTA/Fowler and Foemmel - 2006 - Continuous integration.pdf:application/pdf}
}

@article{mens_complexity_2012,
	title = {On the {Complexity} of {Software} {Systems}},
	volume = {45},
	issn = {0018-9162},
	doi = {10.1109/MC.2012.273},
	abstract = {Developing the tools necessary for reasoning about and understanding large, complex software systems requires interdisciplinary research that borrows from other domains where complexity similarly comes into play.},
	number = {8},
	journal = {Computer},
	author = {Mens, T.},
	month = aug,
	year = {2012},
	keywords = {complexity, Complexity theory, complex software systems, interdisciplinary research, Software engineering, software technologies, Software tools},
	pages = {79--81},
	file = {IEEE Xplore Abstract Record:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/FM6RN3C9/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/44SDANBR/Mens - 2012 - On the Complexity of Software Systems.pdf:application/pdf}
}

@misc{spolsky_law_2002,
	title = {The {Law} of {Leaky} {Abstractions} - {Joel} on {Software}},
	url = {http://www.joelonsoftware.com/articles/LeakyAbstractions.html},
	abstract = {This is what I call a leaky abstraction. TCP attempts to provide a complete abstraction of an underlying unreliable network, but sometimes, the network leaks through the abstraction and you feel the things that the abstraction can't quite protect you from. This is but one example of what I've dubbed the Law of Leaky Abstractions},
	urldate = {2016-05-08},
	author = {Spolsky, Joel},
	month = nov,
	year = {2002},
	file = {The Law of Leaky Abstractions - Joel on Software:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/M8TFMWQ3/LeakyAbstractions.html:text/html}
}

@article{misra_identifying_2009,
	series = {{SI}: {TAIC} {PART} 2007 and {MUTATION} 2007},
	title = {Identifying some important success factors in adopting agile software development practices},
	volume = {82},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S016412120900123X},
	doi = {10.1016/j.jss.2009.05.052},
	abstract = {Agile software development (ASD) is an emerging approach in software engineering, initially advocated by a group of 17 software professionals who practice a set of {\textquotedblleft}lightweight{\textquotedblright} methods, and share a common set of values of software development. In this paper, we advance the state-of-the-art of the research in this area by conducting a survey-based ex-post-facto study for identifying factors from the perspective of the ASD practitioners that will influence the success of projects that adopt ASD practices. In this paper, we describe a hypothetical success factors framework we developed to address our research question, the hypotheses we conjectured, the research methodology, the data analysis techniques we used to validate the hypotheses, and the results we obtained from data analysis. The study was conducted using an unprecedentedly large-scale survey-based methodology, consisting of respondents who practice ASD and who had experience practicing plan-driven software development in the past. The study indicates that nine of the 14 hypothesized factors have statistically significant relationship with {\textquotedblleft}Success{\textquotedblright}. The important success factors that were found are: customer satisfaction, customer collaboration, customer commitment, decision time, corporate culture, control, personal characteristics, societal culture, and training and learning.},
	number = {11},
	urldate = {2016-05-09},
	journal = {Journal of Systems and Software},
	author = {Misra, Subhas Chandra and Kumar, Vinod and Kumar, Uma},
	month = nov,
	year = {2009},
	keywords = {Agile Software, Success factors},
	pages = {1869--1890},
	file = {ScienceDirect Full Text PDF:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/H6F7ZGNS/Misra et al. - 2009 - Identifying some important success factors in adop.pdf:application/pdf;ScienceDirect Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/3DCXTR46/S016412120900123X.html:text/html}
}

@misc{_benefits_2013,
	title = {The {Benefits} of {Continuous} {Integration}},
	url = {https://blog.codeship.com/benefits-of-continuous-integration/},
	abstract = {Continuous Integration provides sound economical benefits. Check the bottom-line advantages with respect to any business dealing with software deployment.},
	urldate = {2016-05-21},
	journal = {via @codeship},
	month = apr,
	year = {2013},
	file = {Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/7ZTNJF8A/benefits-of-continuous-integration.html:text/html}
}

@article{oreilly_what_2007,
	title = {What is {Web} 2.0: {Design} patterns and business models for the next generation of software},
	shorttitle = {What is {Web} 2.0},
	url = {http://papers.ssrn.com/sol3/Papers.cfm?abstract_id=1008839},
	number = {1},
	urldate = {2016-05-21},
	journal = {Communications \& strategies},
	author = {O'reilly, Tim},
	year = {2007},
	pages = {17},
	file = {[PDF] from uni-muenchen.de:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/Q4GFNZPP/O'reilly - 2007 - What is Web 2.0 Design patterns and business mode.pdf:application/pdf;Snapshot:/home/gautam/.mozilla/firefox/mwad0hks.default/zotero/storage/KQPDS7GA/Papers.html:text/html}
}